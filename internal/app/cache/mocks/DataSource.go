// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	"context"

	"github.com/stretchr/testify/mock"

	"github.com/ghkadim/highload_architect/internal/models"
)

// DataSource is an autogenerated mock type for the DataSource type
type DataSource struct {
	mock.Mock
}

type DataSource_Expecter struct {
	mock *mock.Mock
}

func (_m *DataSource) EXPECT() *DataSource_Expecter {
	return &DataSource_Expecter{mock: &_m.Mock}
}

// PostFeed provides a mock function with given fields: ctx, user, offset, limit
func (_m *DataSource) PostFeed(ctx context.Context, user models.UserID, offset int, limit int) ([]models.Post, error) {
	ret := _m.Called(ctx, user, offset, limit)

	var r0 []models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID, int, int) ([]models.Post, error)); ok {
		return rf(ctx, user, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID, int, int) []models.Post); ok {
		r0 = rf(ctx, user, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserID, int, int) error); ok {
		r1 = rf(ctx, user, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataSource_PostFeed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostFeed'
type DataSource_PostFeed_Call struct {
	*mock.Call
}

// PostFeed is a helper method to define mock.On call
//   - ctx context.Context
//   - user models.UserID
//   - offset int
//   - limit int
func (_e *DataSource_Expecter) PostFeed(ctx interface{}, user interface{}, offset interface{}, limit interface{}) *DataSource_PostFeed_Call {
	return &DataSource_PostFeed_Call{Call: _e.mock.On("PostFeed", ctx, user, offset, limit)}
}

func (_c *DataSource_PostFeed_Call) Run(run func(ctx context.Context, user models.UserID, offset int, limit int)) *DataSource_PostFeed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UserID), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *DataSource_PostFeed_Call) Return(_a0 []models.Post, _a1 error) *DataSource_PostFeed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataSource_PostFeed_Call) RunAndReturn(run func(context.Context, models.UserID, int, int) ([]models.Post, error)) *DataSource_PostFeed_Call {
	_c.Call.Return(run)
	return _c
}

// UserFriends provides a mock function with given fields: ctx, user
func (_m *DataSource) UserFriends(ctx context.Context, user models.UserID) ([]models.UserID, error) {
	ret := _m.Called(ctx, user)

	var r0 []models.UserID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID) ([]models.UserID, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID) []models.UserID); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserID) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataSource_UserFriends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserFriends'
type DataSource_UserFriends_Call struct {
	*mock.Call
}

// UserFriends is a helper method to define mock.On call
//   - ctx context.Context
//   - user models.UserID
func (_e *DataSource_Expecter) UserFriends(ctx interface{}, user interface{}) *DataSource_UserFriends_Call {
	return &DataSource_UserFriends_Call{Call: _e.mock.On("UserFriends", ctx, user)}
}

func (_c *DataSource_UserFriends_Call) Run(run func(ctx context.Context, user models.UserID)) *DataSource_UserFriends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UserID))
	})
	return _c
}

func (_c *DataSource_UserFriends_Call) Return(_a0 []models.UserID, _a1 error) *DataSource_UserFriends_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataSource_UserFriends_Call) RunAndReturn(run func(context.Context, models.UserID) ([]models.UserID, error)) *DataSource_UserFriends_Call {
	_c.Call.Return(run)
	return _c
}

// UserPosts provides a mock function with given fields: ctx, user, limit
func (_m *DataSource) UserPosts(ctx context.Context, user models.UserID, limit int) ([]models.Post, error) {
	ret := _m.Called(ctx, user, limit)

	var r0 []models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID, int) ([]models.Post, error)); ok {
		return rf(ctx, user, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID, int) []models.Post); ok {
		r0 = rf(ctx, user, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserID, int) error); ok {
		r1 = rf(ctx, user, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataSource_UserPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserPosts'
type DataSource_UserPosts_Call struct {
	*mock.Call
}

// UserPosts is a helper method to define mock.On call
//   - ctx context.Context
//   - user models.UserID
//   - limit int
func (_e *DataSource_Expecter) UserPosts(ctx interface{}, user interface{}, limit interface{}) *DataSource_UserPosts_Call {
	return &DataSource_UserPosts_Call{Call: _e.mock.On("UserPosts", ctx, user, limit)}
}

func (_c *DataSource_UserPosts_Call) Run(run func(ctx context.Context, user models.UserID, limit int)) *DataSource_UserPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UserID), args[2].(int))
	})
	return _c
}

func (_c *DataSource_UserPosts_Call) Return(_a0 []models.Post, _a1 error) *DataSource_UserPosts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataSource_UserPosts_Call) RunAndReturn(run func(context.Context, models.UserID, int) ([]models.Post, error)) *DataSource_UserPosts_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewDataSource interface {
	mock.TestingT
	Cleanup(func())
}

// NewDataSource creates a new instance of DataSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDataSource(t mockConstructorTestingTNewDataSource) *DataSource {
	mock := &DataSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
