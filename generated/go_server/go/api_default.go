/*
 * OTUS Highload Architect
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
	errorHandler ErrorHandler
}

// DefaultApiOption for how the controller is set up.
type DefaultApiOption func(*DefaultApiController)

// WithDefaultApiErrorHandler inject ErrorHandler into controller
func WithDefaultApiErrorHandler(h ErrorHandler) DefaultApiOption {
	return func(c *DefaultApiController) {
		c.errorHandler = h
	}
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer, opts ...DefaultApiOption) Router {
	controller := &DefaultApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{ 
		{
			"DialogUserIdListGet",
			strings.ToUpper("Get"),
			"/dialog/{user_id}/list",
			c.DialogUserIdListGet,
		},
		{
			"DialogUserIdSendPost",
			strings.ToUpper("Post"),
			"/dialog/{user_id}/send",
			c.DialogUserIdSendPost,
		},
		{
			"FriendDeleteUserIdPut",
			strings.ToUpper("Put"),
			"/friend/delete/{user_id}",
			c.FriendDeleteUserIdPut,
		},
		{
			"FriendSetUserIdPut",
			strings.ToUpper("Put"),
			"/friend/set/{user_id}",
			c.FriendSetUserIdPut,
		},
		{
			"LoginPost",
			strings.ToUpper("Post"),
			"/login",
			c.LoginPost,
		},
		{
			"PostCreatePost",
			strings.ToUpper("Post"),
			"/post/create",
			c.PostCreatePost,
		},
		{
			"PostDeleteIdPut",
			strings.ToUpper("Put"),
			"/post/delete/{id}",
			c.PostDeleteIdPut,
		},
		{
			"PostFeedGet",
			strings.ToUpper("Get"),
			"/post/feed",
			c.PostFeedGet,
		},
		{
			"PostGetIdGet",
			strings.ToUpper("Get"),
			"/post/get/{id}",
			c.PostGetIdGet,
		},
		{
			"PostUpdatePut",
			strings.ToUpper("Put"),
			"/post/update",
			c.PostUpdatePut,
		},
		{
			"UserGetIdGet",
			strings.ToUpper("Get"),
			"/user/get/{id}",
			c.UserGetIdGet,
		},
		{
			"UserRegisterPost",
			strings.ToUpper("Post"),
			"/user/register",
			c.UserRegisterPost,
		},
		{
			"UserSearchGet",
			strings.ToUpper("Get"),
			"/user/search",
			c.UserSearchGet,
		},
	}
}

// DialogUserIdListGet - 
func (c *DefaultApiController) DialogUserIdListGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["user_id"]
	
	result, err := c.service.DialogUserIdListGet(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DialogUserIdSendPost - 
func (c *DefaultApiController) DialogUserIdSendPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["user_id"]
	
	dialogUserIdSendPostRequestParam := DialogUserIdSendPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dialogUserIdSendPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDialogUserIdSendPostRequestRequired(dialogUserIdSendPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DialogUserIdSendPost(r.Context(), userIdParam, dialogUserIdSendPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// FriendDeleteUserIdPut - 
func (c *DefaultApiController) FriendDeleteUserIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["user_id"]
	
	result, err := c.service.FriendDeleteUserIdPut(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// FriendSetUserIdPut - 
func (c *DefaultApiController) FriendSetUserIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["user_id"]
	
	result, err := c.service.FriendSetUserIdPut(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// LoginPost - 
func (c *DefaultApiController) LoginPost(w http.ResponseWriter, r *http.Request) {
	loginPostRequestParam := LoginPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&loginPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLoginPostRequestRequired(loginPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.LoginPost(r.Context(), loginPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostCreatePost - 
func (c *DefaultApiController) PostCreatePost(w http.ResponseWriter, r *http.Request) {
	postCreatePostRequestParam := PostCreatePostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&postCreatePostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostCreatePostRequestRequired(postCreatePostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostCreatePost(r.Context(), postCreatePostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostDeleteIdPut - 
func (c *DefaultApiController) PostDeleteIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	
	result, err := c.service.PostDeleteIdPut(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostFeedGet - 
func (c *DefaultApiController) PostFeedGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	offsetParam, err := parseInt32Parameter(query.Get("offset"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	limitParam, err := parseInt32Parameter(query.Get("limit"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.PostFeedGet(r.Context(), offsetParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostGetIdGet - 
func (c *DefaultApiController) PostGetIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	
	result, err := c.service.PostGetIdGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostUpdatePut - 
func (c *DefaultApiController) PostUpdatePut(w http.ResponseWriter, r *http.Request) {
	postUpdatePutRequestParam := PostUpdatePutRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&postUpdatePutRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostUpdatePutRequestRequired(postUpdatePutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostUpdatePut(r.Context(), postUpdatePutRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UserGetIdGet - 
func (c *DefaultApiController) UserGetIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	
	result, err := c.service.UserGetIdGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UserRegisterPost - 
func (c *DefaultApiController) UserRegisterPost(w http.ResponseWriter, r *http.Request) {
	userRegisterPostRequestParam := UserRegisterPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userRegisterPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserRegisterPostRequestRequired(userRegisterPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UserRegisterPost(r.Context(), userRegisterPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UserSearchGet - 
func (c *DefaultApiController) UserSearchGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	firstNameParam := query.Get("first_name")
	lastNameParam := query.Get("last_name")
	result, err := c.service.UserSearchGet(r.Context(), firstNameParam, lastNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
